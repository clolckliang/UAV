#ifndef __ANOPTV8PAR_H
#define __ANOPTV8PAR_H
#include "AnoPTv8.hpp"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
如何定义参数：
step1：添加引用：#include "AnoPTv8Par.h"
step2：定义int32_t型参数，或者现有int32_t型变量：int32_t _testpar = 123;
step3：定义该参数的信息，第一个为指向参数的指针，然后依次是参数类型，最小值，最大值，参数名称，参数简介
step4：在程序合适位置，注册该参数（只执行一次），调用函数：AnoPTv8ParRegister(&_testParInfo);
step5：此时，就可以利用上位机对该参数进行读写了
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 参数类型枚举
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum eAnoPTv8_parValType {
    // 严禁修改本枚举
    // 严禁修改本枚举
    // 严禁修改本枚举
    PVT_U8 = 0,
    PVT_S8,
    PVT_U16,
    PVT_S16,
    PVT_U32,
    PVT_S32,
    PVT_U64,
    PVT_S64,
    PVT_Float,
    PVT_Double,
    PVT_Str,
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 参数信息结构体，参数的定义需遵循该结构体，推荐定义为const数组，节省ram
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
    void* pval;            // 参数值的指针，协议解析器解析出参数后，通过该指针进行参数的读写
    const uint8_t type;    // 参数的类型，参见eAnoPTv8_parType
    const int64_t min;     // 参数的最小值
    const int64_t max;     // 参数的最大值
    const char name[20];   // 参数名称，推荐英文字符
    const char info[100];  // 参数介绍，推荐英文字符
} __attribute__((__packed__)) _st_par_info;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 参数相关函数定义
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AnoPTv8ParFrameAnl(const uint16_t linktype, const _un_frame_v8* p);
void AnoPTv8ParRegister(const _st_par_info* _pi);

uint8_t AnoPTv8ParCheckExist(const void* p);
int AnoPTv8ParGetCount(void);
const _st_par_info* AnoPTv8ParGetInfo(const uint16_t parid);

uint8_t AnoPTv8ParCpyVal(const uint16_t parid, uint8_t* d);
void anoPTv8ParSetVal(const _un_frame_v8* p);

#endif
