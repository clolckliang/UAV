#ifndef __ANOPTV8CMD_H
#define __ANOPTV8CMD_H
#include "AnoPTv8.hpp"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
如何定义命令：
step1：添加引用：#include "AnoPTv8Cmd.h"
step2：定义一个函数，无返回值，函数参数为const _un_frame_v8 *p, uint16_t cmdindex，例如：static void AnoPTv8CmdFun_PID_Rest(const _un_frame_v8 *p, uint16_t cmdindex)
step3：定义该命令的信息，第一个为命令参数结构体，然后是命令显示名称，然后是命令介绍，最后是函数指针，指向刚才定义的函数AnoPTv8CmdFun_PID_Rest
                const _st_cmd_info _pCmdInfoResetPid = {{{0x01,0xA0,0x01},{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},"PID_Rest","PIDReset",AnoPTv8CmdFun_PID_Rest};
step4：在程序合适位置，注册该命令（只执行一次），调用函数：AnoPTv8CmdRegister(&_pCmdInfoResetPid);
step5：此时，就可以利用上位机的命令功能触发该功能了
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 命令支持的参数类型定义
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum eAnoPTv8_cmdValType {
    // 注意，严禁修改本枚举
    // 注意，严禁修改本枚举
    // 注意，严禁修改本枚举
    CVT_NA = 0,
    CVT_U8,
    CVT_S8,
    CVT_U16,
    CVT_S16,
    CVT_U32,
    CVT_S32,
    CVT_U64,
    CVT_S64,
    CVT_Float,
    CVT_Double,
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 命令内容结构体，前3字节为命令id，用于识别命令，后面8字节为命令参数类型声明
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
    uint8_t cid[3];
    uint8_t valType[8];
} __attribute__((__packed__)) _st_cmd;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 命令信息结构体，推荐定义为const数组，节省ram
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
    const _st_cmd cmd;
    const char name[20];
    const char info[100];
    void (*pFun)(const _un_frame_v8*, uint16_t);
} __attribute__((__packed__)) _st_cmd_info;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 命令功能相关函数
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AnoPTv8CmdFrameAnl(const uint16_t linktype, const _un_frame_v8* p);
void AnoPTv8CmdRegister(const _st_cmd_info* _pi);

int AnoPTv8CmdGetCount(void);
const _st_cmd_info* AnoPTv8CmdGetInfo(const uint16_t cmdindex);

int AnoPTv8CmdGetValsLength(const uint16_t cmdindex);
void AnoPTv8CmdValCpy(void* d, const _un_frame_v8* p, const uint16_t cmdindex, const int valindex);

uint8_t AnoPTv8CmdSendIsInIdle(void);
uint8_t AnoPTv8CmdSend(const uint16_t linktype, const uint8_t daddr, const uint8_t* cmd, const uint16_t cmdlen);
void AnoPTv8CmdRecvCheck(const uint16_t linktype, const _un_frame_v8* p);
void AnoPTv8CmdRunThread1ms(void);
#endif
